server {
  listen 80;
  listen [::]:80;
  rewrite ^ https://$http_host$request_uri? permanent;
}

server {
  auth_basic  "Restricted";
  auth_basic_user_file  /etc/nginx/auth.htpasswd;

  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate /mprove_certs/cert.pem;
  ssl_certificate_key /mprove_certs/key.pem;

  ssl_session_cache shared:SSL:20m;
  ssl_session_timeout 60m;

  ssl_prefer_server_ciphers on;

  ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

  # ssl_dhparam /etc/nginx/cert/dhparam.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /mprove_certs/cert.pem;
  resolver 8.8.8.8 8.8.4.4;

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  # add_header Strict-Transport-Security "max-age=31536000" always;

  # Rest of your regular config goes here:
  # [â€¦]

  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;  

  location ~ ^/$ {
    return 302 https://$host/login;
  }

  location ~ /api/v1 {
    auth_basic  off;    

    # websockets to work
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    # websocket auto close after last send from backend
    proxy_read_timeout 30s; 

    proxy_pass http://backend:8080;    
  }

  location = /favicon.ico {
    auth_basic  off;

    return 404;
  }

  location /assets {
    auth_basic  off;   

    proxy_pass http://client:4200/assets;
  }

  location / {
    proxy_pass http://client:4200;
  }  
}
