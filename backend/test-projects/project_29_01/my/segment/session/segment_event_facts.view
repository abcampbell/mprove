view: segment_event_facts
derived_table: |
  SELECT
    ${e.received_at},
    ${e.anonymous_id},
    ${e.event_id},
    ${e.event} as event,
    ${e.event_source},    
    ${s.session_id},
    ${e.mprove_visitor_id},
    ROW_NUMBER() OVER(PARTITION BY ${s.session_id} ORDER BY ${e.received_at}) AS event_sequence_number,
    FIRST_VALUE(${e.referrer}) OVER (PARTITION BY ${s.session_id} ORDER BY ${e.received_at} ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as session_first_referrer
  FROM
    ${segment_events_mapped AS e}
  LEFT JOIN
    ${segment_sessions AS s}
  ON
    ${e.mprove_visitor_id} = ${s.mprove_visitor_id}
    AND ${e.received_at} >= ${s.session_start_at}
    AND (${e.received_at} < ${s.next_session_start_at}
      OR ${s.next_session_start_at} IS NULL)
# permanent: true

fields:

- dimension: received_at
  hidden: true
  sql: received_at
  
- time: received_at_frames
  timeframes:
  - time
  - date
  - week
  - month
  sql: received_at  

- dimension: event_id
  sql: event_id
  
- dimension: mprove_visitor_id
  sql: mprove_visitor_id    
  
- dimension: session_id
  sql: session_id  

- dimension: event_sequence_number
  sql: event_sequence_number  
  
- dimension: event_source
  sql: event_source   

- dimension: event
  sql: event
  
- dimension: session_first_referrer
  hidden: true
  sql: session_first_referrer  
  
- measure: count_visitors
  type: count_distinct
  sql: ${mprove_visitor_id}    
 
- measure: count_events
  type: count_distinct
  sql: ${event_id}   
  
- measure: count_tracks
  type: custom
  sql: COUNT(CASE WHEN ${event_source} = 'tracks' THEN 1 ELSE NULL END)  
  
- measure: count_pages
  type: custom
  sql: COUNT(CASE WHEN ${event_source} = 'pages' THEN 1 ELSE NULL END)  
  
- measure: count_action_a
  type: custom
  sql: COUNT(CASE WHEN ${event} = 'action A' THEN 1 ELSE NULL END)   
  
- measure: count_action_b
  type: custom
  sql: COUNT(CASE WHEN ${event} = 'action B' THEN 1 ELSE NULL END)  
  


  
  
  