
# 3_session_tracks.view
# sessions_trk

view: segment_3_session_tracks
derived_table: |
  SELECT
    CONCAT(CAST(ROW_NUMBER() OVER(PARTITION BY ${a.mprove_visitor_id} ORDER BY ${a.timestamp}) AS string), ' - ', ${a.mprove_visitor_id}) AS session_id,
    ${a.mprove_visitor_id},
    ${a.timestamp} AS session_start_at,
    ROW_NUMBER() OVER(PARTITION BY ${a.mprove_visitor_id} ORDER BY ${a.timestamp}) AS session_sequence_number,
    LEAD(${a.timestamp}) OVER(PARTITION BY ${a.mprove_visitor_id} ORDER BY ${a.timestamp}) AS next_session_start_at
  FROM
    ${segment_2_mapped_tracks AS a}
  WHERE
    (${a.idle_time_minutes} > 30
      OR ${a.idle_time_minutes} IS NULL)
# permanent: true
        
fields:
- dimension: session_id
  sql: session_id
  
- dimension: mprove_visitor_id
  sql: mprove_visitor_id
  
- dimension: session_start_at
  sql: session_start_at  
  
- time: session_start_at_frames
  timeframes:
  - time
  - date
  - week
  - month
  sql: session_start_at
  
- dimension: sequence_number
  sql: session_sequence_number
  
- dimension: is_first_session
  sql: CASE WHEN ${sequence_number} = 1 THEN 'First Session' ELSE 'Repeat Session' END
  
- dimension: next_session_start_at
  sql: next_session_start_at
  
- time: next_session_start_at_frames
  source: timestamp
  timeframes:
  - time
  - date
  - week
  - month
  sql: next_session_start_at
  
# - dimension: session_duration_minutes
#   result: number
#   sql:   TIMESTAMP_DIFF(TIMESTAMP(${session_trk_facts.ended_time_time}), TIMESTAMP(${start_time}), MINUTE)

- measure: count
  type: custom
  sql: COUNT(DISTINCT ${session_id})
  
#
# percent_of_total_count
#
  
- measure: count_visitors
  type: count_distinct
  sql: ${mprove_visitor_id}
  
- calculation: avg_sessions_per_user
  sql: ${count} / nullif(${count_visitors}, 0)
  
# - measure: avg_session_duration_minutes
#   type: average_by_key
#   sql: ${session_duration_minutes}
#   sql_key: ${session_id}
  
  
  
  
  
  
  
  
  
  